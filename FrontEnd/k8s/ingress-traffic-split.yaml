# Ingress Principal para Python API
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: python-api-ingress
  namespace: so1-fase2
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-body-size: "1m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    # Habilitamos session affinity basada en IP para mejor distribución
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/affinity-mode: "balanced"
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      # Acceso directo a Python API
      - path: /python(/|$)(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: python-api-service
            port:
              number: 8000

---
# Ingress Canary para Node.js API con mejor distribución
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nodejs-api-ingress-canary
  namespace: so1-fase2
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-body-size: "1m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    # Configuración Canary mejorada
    nginx.ingress.kubernetes.io/canary: "true"
    nginx.ingress.kubernetes.io/canary-weight: "50"
    # Usar hash consistente para mejor distribución
    nginx.ingress.kubernetes.io/upstream-hash-by: "$request_uri$remote_addr"
    # Alternativa: usar canary-by-header para control más preciso
    # nginx.ingress.kubernetes.io/canary-by-header: "X-Canary"
    # nginx.ingress.kubernetes.io/canary-by-header-value: "true"
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      # Esta ruta capturará el 50% del tráfico de /api
      - path: /api(/|$)(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: nodejs-api-service
            port:
              number: 7000

---
# Ingress separado para acceso directo a Node.js
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nodejs-api-direct-ingress
  namespace: so1-fase2
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-body-size: "1m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      # Acceso directo a Node.js API
      - path: /nodejs(/|$)(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: nodejs-api-service
            port:
              number: 7000

---
# Configuración alternativa: Un solo Ingress con ConfigMap personalizado
# Esta es una opción más avanzada que requiere configuración adicional
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-load-balancer-conf
  namespace: so1-fase2
data:
  load-balance.conf: |
    upstream python-backend {
        server python-api-service.so1-fase2.svc.cluster.local:8000 weight=1;
    }
    upstream nodejs-backend {
        server nodejs-api-service.so1-fase2.svc.cluster.local:7000 weight=1;
    }
    upstream balanced-backend {
        server python-api-service.so1-fase2.svc.cluster.local:8000 weight=1;
        server nodejs-api-service.so1-fase2.svc.cluster.local:7000 weight=1;
        least_conn;
    }

---
# Métricas con distribución equitativa
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: metricas-python-ingress
  namespace: so1-fase2
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-body-size: "1m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr$request_uri"
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /metricas
        pathType: Prefix
        backend:
          service:
            name: python-api-service
            port:
              number: 8000

---
# Métricas Canary para Node.js con hash mejorado
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: metricas-nodejs-ingress-canary
  namespace: so1-fase2
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-body-size: "1m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    # Configuración canary mejorada para métricas
    nginx.ingress.kubernetes.io/canary: "true"
    nginx.ingress.kubernetes.io/canary-weight: "50"
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr$request_uri"
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /metricas
        pathType: Prefix
        backend:
          service:
            name: nodejs-api-service
            port:
              number: 7000