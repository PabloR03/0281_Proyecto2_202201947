# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: so1-fase2
  labels:
    name: so1-fase2

---
# ConfigMap para variables de entorno compartidas
apiVersion: v1
kind: ConfigMap
metadata:
  name: db-config
  namespace: so1-fase2
data:
  DB_HOST: "34.56.148.15"
  DB_NAME: "monitoring-metrics"
  DB_USER: "postgres"
  DB_PORT: "5432"

---
# Secret para la contraseña de la base de datos
apiVersion: v1
kind: Secret
metadata:
  name: db-secret
  namespace: so1-fase2
type: Opaque
data:
  DB_PASSWORD: MTIzNDU2Nzg=  # "12345678" en base64

---
# Deployment para API Python
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-python-deployment
  namespace: so1-fase2
  labels:
    app: api-python
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-python
  template:
    metadata:
      labels:
        app: api-python
    spec:
      containers:
      - name: api-python
        image: pablo03r/api1-python-fase2:latest
        ports:
        - containerPort: 8000
        env:
        - name: PORT
          value: "8000"
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: db-config
              key: DB_HOST
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: db-config
              key: DB_NAME
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              name: db-config
              key: DB_USER
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: db-config
              key: DB_PORT
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: DB_PASSWORD
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /test-connection
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5

---
# Service para API Python
apiVersion: v1
kind: Service
metadata:
  name: api-python-service
  namespace: so1-fase2
  labels:
    app: api-python
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: api-python

---
# Deployment para API Node.js (api1)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-nodejs-deployment
  namespace: so1-fase2
  labels:
    app: api-nodejs
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-nodejs
  template:
    metadata:
      labels:
        app: api-nodejs
    spec:
      containers:
      - name: api-nodejs
        image: pablo03r/api1-nodejs-fase2:latest
        ports:
        - containerPort: 7000
        env:
        - name: PORT
          value: "7000"
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: db-config
              key: DB_HOST
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: db-config
              key: DB_NAME
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              name: db-config
              key: DB_USER
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: db-config
              key: DB_PORT
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: DB_PASSWORD
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 7000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /test-connection
            port: 7000
          initialDelaySeconds: 10
          periodSeconds: 5

---
# Service para API Node.js (api1)
apiVersion: v1
kind: Service
metadata:
  name: api-nodejs-service
  namespace: so1-fase2
  labels:
    app: api-nodejs
spec:
  type: ClusterIP
  ports:
  - port: 7000
    targetPort: 7000
    protocol: TCP
    name: http
  selector:
    app: api-nodejs

---
# Deployment para API Node.js 2 (api2) - NUEVA ADICIÓN
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-nodejs2-deployment
  namespace: so1-fase2
  labels:
    app: api-nodejs2
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-nodejs2
  template:
    metadata:
      labels:
        app: api-nodejs2
    spec:
      containers:
      - name: api-nodejs2
        image: pablo03r/api2-nodejs-fase2:latest
        ports:
        - containerPort: 9000
        env:
        - name: PORT
          value: "9000"
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: db-config
              key: DB_HOST
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: db-config
              key: DB_NAME
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              name: db-config
              key: DB_USER
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: db-config
              key: DB_PORT
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: DB_PASSWORD
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 9000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 9000
          initialDelaySeconds: 10
          periodSeconds: 5

---
# Service para API Node.js 2 (api2) - NUEVA ADICIÓN
apiVersion: v1
kind: Service
metadata:
  name: api-nodejs2-service
  namespace: so1-fase2
  labels:
    app: api-nodejs2
spec:
  type: ClusterIP
  ports:
  - port: 9000
    targetPort: 9000
    protocol: TCP
    name: http
  selector:
    app: api-nodejs2

---
# LoadBalancer Service para acceso externo a API Python
apiVersion: v1
kind: Service
metadata:
  name: api-python-lb
  namespace: so1-fase2
  labels:
    app: api-python
spec:
  type: LoadBalancer
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: api-python

---
# LoadBalancer Service para acceso externo a API Node.js (api1)
apiVersion: v1
kind: Service
metadata:
  name: api-nodejs-lb
  namespace: so1-fase2
  labels:
    app: api-nodejs
spec:
  type: LoadBalancer
  ports:
  - port: 7000
    targetPort: 7000
    protocol: TCP
    name: http
  selector:
    app: api-nodejs

---
# LoadBalancer Service para acceso externo a API Node.js 2 (api2) - NUEVA ADICIÓN
apiVersion: v1
kind: Service
metadata:
  name: api-nodejs2-lb
  namespace: so1-fase2
  labels:
    app: api-nodejs2
spec:
  type: LoadBalancer
  ports:
  - port: 9000
    targetPort: 9000
    protocol: TCP
    name: http
  selector:
    app: api-nodejs2